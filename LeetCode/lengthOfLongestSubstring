Given a string, find the length of the longest substring without repeating characters.

Examples:

Given "abcabcbb", the answer is "abc", which the length is 3.

Given "bbbbb", the answer is "b", with the length of 1.

Given "pwwkew", the answer is "wke", with the length of 3. Note that the answer must be a substring, "pwke" is a subsequence and not a substring.


----------
solution
----------

class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        hash = {}
        start = -1
        max_len = 0
        
        for i in range(len(s)):
            if(s[i] in hash):
                if start < hash[s[i]] :
                    start = hash[s[i]]
            hash[s[i]]  = i
            if max_len < i - start:
                max_len = i - start
        return max_len


总结经验：对于寻找某个元素在列表或者字符串的哪个具体的位置时，可以直接用hash map {}
         用map的作用在于，还能够去重，只需要更新最新的位置即可
         另外对于这种求max，肯定要想着动态更新的。
         if max_len < i - start:
            max_len = i - start
         应该是标准解法
