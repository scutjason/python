Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note: The solution set must not contain duplicate triplets.

For example, given array S = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]

解决思路：
先排序，然后用两个指针j k 分别指向头尾，如果sum大于0，则说明，k大了，那么k-1，小于0表示j小了，那么j+1
因为j 肯定小于k位置上的数，这样的小了应该更高。排序之后再移动指针

class Solution(object):
    

    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        if len(nums) <3: 
            return []
        elif len(nums) == 3:
            if sum(nums) == 0:
                return [sorted(nums)]


        nums = sorted(nums) 
        ans = []

        for i in range(len(nums) -2):
            j = i+1
            k = len(nums) -1 

            while j<k: 
                temp_sum = nums[i] + nums[j] + nums[k]
                if temp_sum == 0:
                    ans.append((nums[i], nums[j], nums[k]))

                if temp_sum > 0: 
                    k -= 1
                else:
                    j += 1

        return list(set(tuple(ans))) 
