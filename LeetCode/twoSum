
Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

--------
Example: 
--------
Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].

--------
answer
--------
// 用了hash map的思想，算法复杂度On
// key 为 nums[i] 对应的加数
// value 为 i 
// 每次去find hash_map，查找效率为O1，找到了就能配对了，i为被加数，对应的value为之前保存的加数

class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        if len(nums) <= 1:
            return False
        buff = {}
        for i in range(len(nums)):
            if nums[i] in buff:
                return [buff[nums[i]], i]
            else:
                buff[target - nums[i]] = i

总结：很好的运用了集合{}不重复的特点，对于找索引位置也是map思想
