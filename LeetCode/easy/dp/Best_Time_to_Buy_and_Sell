Say you have an array for which the ith element is the price of a given stock on day i.

If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.

Example 1:
Input: [7, 1, 5, 3, 6, 4]
Output: 5

max. difference = 6-1 = 5 (not 7-1 = 6, as selling price needs to be larger than buying price)
Example 2:
Input: [7, 6, 4, 3, 1]
Output: 0

In this case, no transaction is done, i.e. max profit = 0.


==========
题目说的是，input中每个索引值都是每天股票的价格，你要计算从哪天买入后在卖出的最大收益 ， 1买入6卖出，收益5
            这是一道简单的典型的动态规划，跟新规则是 max(（prices[i] - min_prices）, max_profit)
            切记不要全局去遍历，效率太低
==========

class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        if not prices:
            return 0
        
        profit = 0
        p = prices[0]
        for i in range(len(prices)):
            p = min(prices[i], p)
            profit = max((prices[i] - p), profit)

        return profit
