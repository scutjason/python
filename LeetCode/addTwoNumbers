You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8


------------
solution
------------

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        head = ptr = ListNode(0)
        flag = 0
        
        while l1 or l2 or flag:
            sum=0
            if l1:
                sum +=l1.val
                l1 = l1.next
            if l2:
                sum +=l2.val
                l2 = l2.next

            sum += flag
            ptr.next = ListNode(sum%10)
            flag = sum/10
            ptr = ptr.next
                
        return head.next

总结：比较难想到的是，额外加一个head，对于链表问题，记得加头
