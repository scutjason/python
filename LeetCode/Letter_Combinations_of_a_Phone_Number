Given a digit string, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below.

Input:Digit string "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].


# 递归解法
# A X B X C = (A X B) X C
# 最终要化为两个字符串A和B乘法

# 这里总结下递归的思路和写法
'''
    1、首先是递归的结束条件，一般都是len长度为0或者1 这些
    2、接下来是写循环递归的主体部分
    3、最后写返回
'''

class Solution(object):
    def letterCombinations(self, digits):
        """
        :type digits: str
        :rtype: List[str]
        """
        mapping = {'2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl', 
                   '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'}
        if len(digits) == 0:
            return []
        if len(digits) == 1:
            return list(mapping[digits[0]])
        # 妙哉，这个用prev一直保存着digits前面的N-1个相乘的结果，一直递归前面的N-1个
        prev = self.letterCombinations(digits[:-1])
        
        # additional就是digits最后的那个N 字符串
        additional = mapping[digits[-1]]
        
        # 用两个for循环收网
        return [s + c for s in prev for c in additional]
