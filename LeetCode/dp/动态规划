1、最优化决策，假设为了解决某一优化问题，需要依次作出n个决策D1，D2，…，Dn，如若这个决策序列是最优的，
对于任何一个整数k，1 < k < n，不论前面k个决策是怎样的，以后的最优决策只取决于由前面决策所确定的当前状态，
即以后的决策Dk+1，Dk+2，…，Dn也是最优的。

2、最优化原理必须满足以下条件：
    (1) 问题中的状态必须满足最优化原理；
    (2) 问题中的状态必须满足无后效性。
  所谓无后效性是指：下一时刻的状态只与当前状态有关，而和当前状态之前的状态无关，当前的状态是对以往决策的总结
  
3、动态规划的基础是最优化决策，一般称为DP问题，表现为求最大最小。解法为3点：
    问题的阶段
    每个阶段的状态
    从前一个阶段转化到后一个阶段之间的递推关系
  所以一般采用递归算法来解决，某个阶段某个状态下的最优值最短路径，最长公共子序列，最大价值
  
4、DP经典例题
    (1).Triangle
    Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.
    For example, given the following triangle
    [
         [2],
        [3,4],
       [6,5,7],
      [4,1,8,3]
    ]
    The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).
    Note:
    Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.  
    
    设状态为 f (i; j )，表示从从位置 (i; j ) 出发，路径的最小和，则状态转移方程为
    f(i,j)=min{f(i+1,j),f(i+1,j+1)}+(i,j)
    class Solution(object):
        def minimumTotal(self, triangle):
            """
            :type triangle: List[List[int]]
            :rtype: int
            """
            n = len(triangle)
            dp = triangle[n-1]
            for i in range(n-2,-1,-1): # 倒着写法，这个-1只是表示从n-2位置开始要循环的次数，n-2 - (-1)，循环次数为n-1次
                for j in range(i+1):
                    dp[j] = min( dp[j], dp[j+1] ) + triangle[i][j]
            return dp[0]

再看一个例题
Given an integer matrix, find the length of the longest increasing path.

From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).

Example 1:

nums = [
  [9,9,4],
  [6,6,8],
  [2,1,1]
]
Return 4
The longest increasing path is [1, 2, 6, 9].
nums = [
  [9,9,4],
  [6,6,8],
  [2,1,1]
]

解析：
先从最小的开始，四个方向去走，只走升序的，连相等的都不能走
－－－将矩阵matrix按照值从小到大排序，得到列表slist，
－－－列表元素(x, y, val)存储原矩阵的(行、列、值)
每个点都记录它能走的最长的路径的长度
－－－引入辅助数组dp，dp[x][y]表示从矩阵(x, y)元素出发的最长递增路径长度
最后从所有点选出最长的长度
－－－遍历slist，同时更新(x, y)左、右、上、下四个相邻元素的dp值

我们看到对于这种动态规划类题目，递推的公式比较重要，同时要有基本的思路就是，每递推一步，前一步是有意义的，而且是不需要在计算的，
比如对于上面的题目，我们会这么思考，就是先排序，从最小的数开始，往四周开始搜索，找到最大的搜索路径，比如对于9，他只能搜索自己，4可以搜索两次
而1可以搜索4次，综合起来最大的搜索路径就是4。但是如果用动态规划的思想去做就是，我先拍个序，从最小的开始往四周搜索一下，哪个方向可以搜索那么
这个方向上的对应位置上就加1，这样，如果我再从这个方向上往四周去搜素，因为之前有个方向肯定比他小，所以他只需要找其他三个就好了，不过代码还是
一样的写法，然后依次类推

def longestIncreasingPath(matrix):
	"""
        :type matrix: List[List[int]]
        :rtype: int
        """
	r = len(matrix)
	l = len(matrix[0])
	dp = [[1]*l for i in range(r)]
	#print(dp)
	slist=sorted([(i,j,val)   
				  for i,row in enumerate(matrix)  
				  for j,val in enumerate(row) ], key=lambda x:x[2])
	print(slist)
	for x,y,val in slist:
		for dx,dy in zip([1,0,-1,0],[0,1,0,-1]):  
			nx,ny=x+dx,y+dy  
			if 0<=nx<r and 0<=ny<l and matrix[nx][ny]>matrix[x][y]:  
				dp[nx][ny]=max(dp[nx][ny],dp[x][y]+1)
				print(dp)
	#print(dp)
	return max(max(x) for x in dp) 
print(longestIncreasingPath(nums))

# 打印如下
[(2, 1, 1), (2, 2, 1), (2, 0, 2), (0, 2, 4), (1, 0, 6), (1, 1, 6), (1, 2, 8), (0, 0, 9), (0, 1, 9)]
[[1, 1, 1], [1, 2, 1], [1, 1, 1]]
[[1, 1, 1], [1, 2, 1], [2, 1, 1]]
[[1, 1, 1], [1, 2, 2], [2, 1, 1]]
[[1, 1, 1], [3, 2, 2], [2, 1, 1]]
[[1, 1, 1], [3, 2, 2], [2, 1, 1]]
[[1, 2, 1], [3, 2, 2], [2, 1, 1]]
[[4, 2, 1], [3, 2, 2], [2, 1, 1]]
[[4, 2, 1], [3, 2, 3], [2, 1, 1]]
[[4, 3, 1], [3, 2, 3], [2, 1, 1]]
4
